## 語言要求

### 一般規範

- **清晰簡潔**：輸出應易讀，避免冗長與複雜結構  
- **風格一致**：程式碼、文件與專案結構需統一風格  

### 程式碼風格偏好

#### 縮排

- 使用 **2 個空格**

#### 命名規範

- **變數與函數**：使用 `camelCase`  
- **類別名稱**：使用 `PascalCase`  
- **檔案命名**：使用 `camelCase`（例：`designSystem.js`）

#### 註解要求

- 函數、類別及較為複雜的邏輯需提供具有意義的註解  
- 使用簡潔語句描述功能與目的

### 文件風格

#### 程式碼註解

- 遵循 **JSDoc 標準**

#### 非程式碼文件

- 使用 **Markdown 格式**
- 偏好：簡短標題、條列清單

## 專案具體要求

1. **設計系統一致性**：模組化、可重用性優先  
2. **現代與簡約風格**：清晰排版、適當留白  
3. **模組化組件設計**：支援重用與擴展  
4. **整體一致性**：排版、配色、互動行為需統一  
5. **簡潔溝通原則**：使用類似電報式的語句  

## 外部參考

- 外部API內容參考：**[均嘉ERP API](https://api.civil-manager.com/openapi.json)**

## 檢查與回饋流程

1. 輸出前請進行自我審查  
2. 確保完全符合上述風格與規範  

## 溝通要求

### 1. 需求分析

請仔細檢查以下邏輯：

- 前端邏輯  
- 資料庫表結構與函數  
- 觸發器邏輯  
- RLS（Row-Level Security）政策  

### 2. 發現邏輯衝突時

- 明確指出衝突點  
- 解釋衝突原因  
- 提出可能的解法  

### 3. 功能調整原則

- 不得影響現有功能  
- 如有影響，需先討論，不可擅自更改  

### 4. 型別錯誤處理

- 修正時，不得動到其他功能  
- 不可修改未提及的需求  
